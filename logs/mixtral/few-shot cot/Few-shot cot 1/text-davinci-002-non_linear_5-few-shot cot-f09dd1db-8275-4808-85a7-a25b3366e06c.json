{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.",
    "examples": "Here are a few examples how to solve operations research problems:\nProblem: MG Auto has three plants in Los Angeles, Detroit, and New Orleans and two major distribution centers in Denver and Miami. The quarterly capacities of the three plants are 1000, 1500, and 1200 cars, and the demands at the two distribution centers for the same period are 2300 and 1400 cars. The mileage between the plants and the distribution centers is: from Los Angeles to Denver 1000 miles, from Los Angeles to Miami 2690 miles, from Detroit to Denver 1250 miles, from Detroit to Miami 1350 miles, from New Orleans to Denver 1275 miles, from New Orleans to Miami 850 miles. The trucking company in charge of transporting the cars charges 8 cents per mile per car. Calculate the minimal transportation cost.\nTo solve the problem you would follow these steps:\n1) Identify the type of optimization: Minimization.\n2) Model the objective function:\nMinimize z = 80x11 + 215x12 + 100x21 + 108x22 + 102x31 + 68x32\n3) Model the constraints:\nx11 + x12 = 1000 (Los Angeles)\nx21 + x22 = 1500 (Detroit)\nx31 + x32 = 1200 (New Oreleans)\nx11 + x21 + x31 = 2300 (Denver)\nx12 + x22 + x32 = 1400 (Miami)\n4) Solve the linear programming problem with code:\n```python\nfrom pulp import LpProblem, LpVariable, lpSum, LpMinimize\nimport numpy as np\n# Define constants\nplants = ['Los Angeles', 'Detroit', 'New Orleans']\ndistribution_centers = ['Denver', 'Miami']\ncapacities = np.array([1000, 1500, 1200])\ndemands = np.array([2300, 1400])\nmileage_chart = np.array([[1000, 2690], [1250, 1350], [1275, 850]])\n# Define LP problem\nproblem = LpProblem(\"Transportation Problem\", LpMinimize)\n# Define decision variables\nx = LpVariable.dicts(\"Cars\", ((i, j) for i in plants for j in distribution_centers), lowBound=0, cat='Integer')\n# Define objective function\nproblem += lpSum(mileage_chart[i][j] * x[(plants[i], distribution_centers[j])] * 0.08 for i in range(len(plants)) for j in range(len(distribution_centers)))\n# Define constraints\nfor i in range(len(plants)):\n    problem += lpSum(x[(plants[i], dc)] for dc in distribution_centers) <= capacities[i]\nfor j in range(len(distribution_centers)):\n    problem += lpSum(x[(plant, distribution_centers[j])] for plant in plants) >= demands[j]\n# Solve the LP problem\nproblem.solve()\n# Assign total cost to variable \"solution\"\nsolution = round(problem.objective.value(), 2)\n```\n---\nProblem: Maximize f(x) = 2*x1 + 3*x2 - x1^2 - x2^2, subject to x1 + x2 <= 2 and x1, x2 >= 0\nTo solve the problem you would follow these steps:\n1) Identify the type of optimization (minimization or maximization)\nType of optimization: Maximization\nInequality constraints.\n2) Model the objective function:\nf(x) = 2*x1 + 3*x2 - x1^2 - x2^2\n3) Model the constraints (unconstrained, equality constrains, inequality constrains, quadratic)\nx1 + x2 <= 2, x1, x2 >= 0\n4) Implement the objective function and with code:\n```python\nfrom scipy.optimize import minimize\n# Define the objective function to maximize\ndef objective_function(x):\n    return -(2*x[0] + 3*x[1] - x[0]**2 - x[1]**2)\n# Define the inequality constraint function\ndef constraint_function(x):\n    return 2 - (x[0] + x[1])\n# Define the initial guess\ninitial_guess = [0, 0]\n# Define the constraints\nconstraints = ({'type': 'ineq', 'fun': constraint_function})\n# Define the bounds\nbounds = ((0, None), (0, None))  # x1 and x2 >= 0\n# Solve the optimization problem\nsolution = -1*minimize(objective_function, initial_guess, bounds=bounds, constraints=constraints).fun\n```\n---\nProblem: A graph is comprised of the nodes A, B, C, D, E and undirected edges between A and B (length 8), A and C (length 4), A and D (length 8), A and E (length 11), B and C (length 5), B and D (length 6), B and E (length 3), C and D (length 4), C and E (length 7), D and E (length 6). Find the optimal solution to visit all the nodes in the minimum distance (travelling salesman).\nTo solve the problem you would follow these steps:\n1) Identify the number of possible solutions (computational complexity of the problem):\n(n-1)! = 120\n2) Select an algorithm to solve the problem based on the complexity:\nExact solution using branch-and-bound\n3) Implement the algorithm:\n```python\ngraph = [\n    [0, 8, 4, 8, 11],\n    [8, 0, 5, 6, 3],\n    [4, 5, 0, 4, 7],\n    [8, 6, 4, 0, 6],\n    [11, 3, 7, 6, 0]\n]\nn = len(graph)\nvisited = [False] * n\npath = []\nmin_cost = float(\"inf\")\n\n# Function to calculate the cost of the current path\ndef calculate_cost(path):\n    cost = 0\n    for i in range(len(path) - 1):\n        cost += graph[path[i]][path[i+1]]\n    return cost\n\n# Branch and bound function\ndef branch_and_bound(curr_pos, curr_cost):\n    global min_cost\n    if len(path) == n:\n        curr_cost += graph[curr_pos][path[0]]\n        min_cost = min(min_cost, curr_cost)\n        return\n    \n    # Branching step\n    for i in range(n):\n        if not visited[i] and graph[curr_pos][i] != 0:\n            visited[i] = True\n            path.append(i)\n            branch_and_bound(i, curr_cost + graph[curr_pos][i])\n            \n            # Backtracking step\n            visited[i] = False\n            path.pop()\n\n# Start from the first city (0th index)\npath.append(0)\nvisited[0] = True\n\n# Call the branch and bound function\nbranch_and_bound(0, 0)\nsolution = min_cost\n```",
    "output": " To solve the MFG Corporation production problem, you can follow these steps:\n\n1. Identify the type of optimization: Maximization.\n2. Model the objective function:\n   Maximize z = 360*x1 (for the first 15 units) + 30*(x1-15) (for the remaining units) + 240*x2 (for the first 20 units) + 120*(x2-20) (for the next 20 units) + 90*(x2-40) (for the remaining units) + 450*x3 (for the first 20 units) + 300*(x3-20) (for the next 10 units) + 180*(x3-30) (for the remaining units)\n3. Model the constraints:\n   x1 + x2 + x3 <= 60\n   3*x1 + 2*x2 <= 200\n   x1 + 2*x3 <= 70\n   x1, x2, x3 >= 0\n4. Implement the objective function and constraints with Python code using the pulp package:\n\n```python\nfrom pulp import LpProblem, LpVariable, lpSum, LpMaximize\n\n# Define the optimization problem\nproblem = LpProblem(\"MFG Corporation Production Problem\", LpMaximize)\n\n# Define decision variables\nx1 = LpVariable(\"x1\", 0, None, LpContinuous)\nx2 = LpVariable(\"x2\", 0, None, LpContinuous)\nx3 = LpVariable(\"x3\", 0, None, LpContinuous)\n\n# Define the objective function\nproblem += 360*x1*(15 < x1 <= 30) + 30*(x1 - 15) + 240*x2*(20 < x2 <= 40) + 120*(x2 - 20) + 90*(x2 - 40) + 450*x3*(20 < x3 <= 30) + 300*(x3 - 20) + 180*(x3 - 30)\n\n# Define constraints\nproblem += x1 + x2 + x3 <= 60\nproblem += 3*x1 + 2*x2 <= 200\nproblem += x1 + 2*x3 <= 70\n\n# Solve the optimization problem\nproblem.solve()\n\n# Assign the total profit to the variable 'solution'\nsolution = round(problem.objective.value(), 2)\n```\n\nIn this case, the variable 'solution' will contain the maximum total profit that MFG Corporation can achieve by producing the specified number of units of the three products.",
    "code": "from pulp import LpProblem, LpVariable, lpSum, LpMaximize\n\n# Define the optimization problem\nproblem = LpProblem(\"MFG Corporation Production Problem\", LpMaximize)\n\n# Define decision variables\nx1 = LpVariable(\"x1\", 0, None, LpContinuous)\nx2 = LpVariable(\"x2\", 0, None, LpContinuous)\nx3 = LpVariable(\"x3\", 0, None, LpContinuous)\n\n# Define the objective function\nproblem += 360*x1*(15 < x1 <= 30) + 30*(x1 - 15) + 240*x2*(20 < x2 <= 40) + 120*(x2 - 20) + 90*(x2 - 40) + 450*x3*(20 < x3 <= 30) + 300*(x3 - 20) + 180*(x3 - 30)\n\n# Define constraints\nproblem += x1 + x2 + x3 <= 60\nproblem += 3*x1 + 2*x2 <= 200\nproblem += x1 + 2*x3 <= 70\n\n# Solve the optimization problem\nproblem.solve()\n\n# Assign the total profit to the variable 'solution'\nsolution = round(problem.objective.value(), 2)",
    "solution": "COMPILE_ERROR"
}