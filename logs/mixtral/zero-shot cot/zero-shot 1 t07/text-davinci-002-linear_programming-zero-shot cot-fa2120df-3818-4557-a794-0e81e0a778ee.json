{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": " Sure! We can formulate this problem as a linear programming problem. Let's denote:\n\n- x1 as the number of units of product 1 to produce\n- x2 as the number of units of product 2 to produce\n\nWe have two constraints based on the availability of frame parts and electrical components:\n\n1. 1x1 + 3x2 \u2264 200\n2. 2x1 + 2x2 \u2264 300\n\nThe objective function to maximize is the profit:\n\n1. Profit(x1, x2) = 1x1 + 2x2\n\nSubject to the constraints, we want to maximize the profit. We can also simplify the constraints by removing the inequalities and considering them as equalities (as the problem asks for the maximum possible production), so:\n\n1. 1x1 + 3x2 = 200\n2. 2x1 + 2x2 = 300\n\nNow, let's solve the problem using Python and the `scipy.optimize` library.\n\n```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\n# Objective function coefficients\nc = np.array([1, 2])\n\n# A_eq coefficients\nA_eq = np.array([[1, 3], [2, 2]])\n\n# b_eq right side values\nb_eq = np.array([200, 300])\n\n# Setting up bounds\nbounds = [(0, None), (0, 60)]\n\n# Solve the problem\nres = linprog(c=c, A_eq=A_eq, b_eq=b_eq, bounds=bounds)\n\nsolution = res.fun\n```\n\nThe variable `solution` now contains the maximum possible profit.", "code": "import numpy as np\nfrom scipy.optimize import linprog\n\n# Objective function coefficients\nc = np.array([1, 2])\n\n# A_eq coefficients\nA_eq = np.array([[1, 3], [2, 2]])\n\n# b_eq right side values\nb_eq = np.array([200, 300])\n\n# Setting up bounds\nbounds = [(0, None), (0, 60)]\n\n# Solve the problem\nres = linprog(c=c, A_eq=A_eq, b_eq=b_eq, bounds=bounds)\n\nsolution = res.fun", "solution": 175.0}