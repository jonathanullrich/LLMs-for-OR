{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "output": "\n\nWe are given two constraints (frame parts and electrical components) and two types of products with different profit values and different resource requirements. This problem can be solved using a technique called linear programming. We will use the `scipy.optimize.linprog` function to solve the problem.\n\n```python\nimport numpy as np\nfrom scipy.optimize import linprog\n\n# Resource constraints\nframe_parts_constraint = 200\nelectrical_components_constraint = 300\n\n# Product requirements and profit\nproduct_1_requirements = np.array([1, 2])\nproduct_1_profit = 1\nproduct_2_requirements = np.array([3, 2])\nproduct_2_profit = 2\n\n# Maximum number of product 2 units\nmax_product_2_units = 60\n\n# Problem formulation (maximize profit)\nc = np.array([product_1_profit, product_2_profit])\nA_ub = np.vstack((product_1_requirements, product_2_requirements)).T\nb_ub = np.array([frame_parts_constraint, electrical_components_constraint])\n\n# Adding the maximum number of product 2 units as a constraint\nA_ub = np.vstack((A_ub, np.array([0, 1])))\nb_ub = np.append(b_ub, max_product_2_units)\n\n# Solving the linear programming problem\nresult = linprog(c=c, A_ub=A_ub, b_ub=b_ub, bounds=((0, None), (0, 60)))\n\n# Assigning the final output (total profit)\nsolution = result.fun\n```\n\nThe solution variable contains the resulting total profit.", "code": "import numpy as np\nfrom scipy.optimize import linprog\n\n# Resource constraints\nframe_parts_constraint = 200\nelectrical_components_constraint = 300\n\n# Product requirements and profit\nproduct_1_requirements = np.array([1, 2])\nproduct_1_profit = 1\nproduct_2_requirements = np.array([3, 2])\nproduct_2_profit = 2\n\n# Maximum number of product 2 units\nmax_product_2_units = 60\n\n# Problem formulation (maximize profit)\nc = np.array([product_1_profit, product_2_profit])\nA_ub = np.vstack((product_1_requirements, product_2_requirements)).T\nb_ub = np.array([frame_parts_constraint, electrical_components_constraint])\n\n# Adding the maximum number of product 2 units as a constraint\nA_ub = np.vstack((A_ub, np.array([0, 1])))\nb_ub = np.append(b_ub, max_product_2_units)\n\n# Solving the linear programming problem\nresult = linprog(c=c, A_ub=A_ub, b_ub=b_ub, bounds=((0, None), (0, 60)))\n\n# Assigning the final output (total profit)\nsolution = result.fun", "solution": 0.0}