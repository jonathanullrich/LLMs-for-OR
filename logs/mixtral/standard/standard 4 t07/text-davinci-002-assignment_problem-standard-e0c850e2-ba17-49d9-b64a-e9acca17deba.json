{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are for Backstroke: Carl (37.7), Chris (32.9), David (33.8), Tony (37.0), Ken (35.4); for Breaststroke: Carl (43.4), Chris (33.1), David (42.2), Tony (34.7), Ken (41.8); for Butterfly: Carl (33.3), Chris (28.5), David (38.9), Tony (30.4), Ken (33.6); for Freestyle: Carl (29.2), Chris (26.4), David (29.6), Tony (28.5), Ken (31.1). The coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times. Find the minimum time spend.", "output": "\nTo solve this problem, we can use the concept of assignment problem and solve it using the Hungarian algorithm. We will first create a matrix with the best times achieved by each swimmer in each stroke, then apply the Hungarian algorithm to find the optimal assignment of swimmers to strokes.\n\nHere's the python code:\n\n```python\nimport numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n# Define the times matrix\ntimes = np.array([\n    [37.7, 43.4, 33.3, 29.2],\n    [32.9, 33.1, 28.5, 26.4],\n    [33.8, 42.2, 38.9, 29.6],\n    [37.0, 34.7, 30.4, 28.5],\n    [35.4, 41.8, 33.6, 31.1]\n]).T\n\n# Solve the assignment problem\nrow_indices, col_indices = linear_sum_assignment(times)\n\n# Calculate the minimum time spend\nminimum_time = np.sum(times[row_indices, col_indices])\nsolution = minimum_time\n```\n\nThe 'solution' variable now contains the minimum time spent for the 200-yard medley relay team.", "code": "import numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n# Define the times matrix\ntimes = np.array([\n    [37.7, 43.4, 33.3, 29.2],\n    [32.9, 33.1, 28.5, 26.4],\n    [33.8, 42.2, 38.9, 29.6],\n    [37.0, 34.7, 30.4, 28.5],\n    [35.4, 41.8, 33.6, 31.1]\n]).T\n\n# Solve the assignment problem\nrow_indices, col_indices = linear_sum_assignment(times)\n\n# Calculate the minimum time spend\nminimum_time = np.sum(times[row_indices, col_indices])\nsolution = minimum_time", "solution": 126.2}