{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: Four jobs must be processed on a single machine. The processing times for the jobs 1, 2, 3 and 4 are 6 days, 4 days, 5 days and 8 days, respectively. Job 1 must be completed by the end of day 8, Job 2 must be completed by the end of day 4, Job 3 must be completed by the end of day 12 and Job 4 must be completed by the end of day 16. What is the minimal time to process the jobs?",
    "output": "This problem is a classic example of job scheduling. It can be solved using priority queue or heap data structure. The idea is to sort the jobs by their deadlines and then process them in that order.\n\nHere is a simple Python code to solve this problem using heap data structure:\n\n```python\nimport heapq\n\n# list of jobs with their processing times and deadlines\njobs = [(6, 8), (4, 4), (5, 12), (8, 16)]\n\n# sort jobs by their deadlines\njobs.sort(key=lambda x: x[1])\n\n# create a max heap for processing the jobs\nheap = []\ntime = 0\nfor job in jobs:\n    # add job processing time to total time\n    time += job[0]\n    \n    # push the job processing time to the heap\n    heapq.heappush(heap, -job[0])\n    \n    # if total time exceeds the job deadline\n    while time > job[1]:\n        # remove the job with maximum processing time from the heap\n        max_time = heapq.heappop(heap)\n        \n        # subtract the maximum processing time from total time\n        time += max_time\n\nsolution = time\n```\n\nThe variable 'solution' holds the minimal time to process the jobs.",
    "code": "import heapq\n\n# list of jobs with their processing times and deadlines\njobs = [(6, 8), (4, 4), (5, 12), (8, 16)]\n\n# sort jobs by their deadlines\njobs.sort(key=lambda x: x[1])\n\n# create a max heap for processing the jobs\nheap = []\ntime = 0\nfor job in jobs:\n    # add job processing time to total time\n    time += job[0]\n    \n    # push the job processing time to the heap\n    heapq.heappush(heap, -job[0])\n    \n    # if total time exceeds the job deadline\n    while time > job[1]:\n        # remove the job with maximum processing time from the heap\n        max_time = heapq.heappop(heap)\n        \n        # subtract the maximum processing time from total time\n        time += max_time\n\nsolution = time",
    "solution": 9
}