{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: A hiker has a 5-ft^3 backpack and needs to decide on the most valuable items to take on the hiking trip. There are three items from which to choose. Their volumes are 2, 3, and 4 ft^3, and the hiker estimates their associated values on a scale from 0 to 100 as 30, 50, and 70, respectively. Find the optimal solution.",
    "output": "This is a classic problem known as the knapsack problem and can be solved by using dynamic programming.\n\nHere is a Python code to solve the problem:\n\n```python\ndef knapSack(W, wt, val, n):\n \n    # Base Case\n    if n == 0 or W == 0 :\n        return 0\n \n    # If weight of the nth item is\n    # more than Knapsack of capacity W,\n    # then this item cannot be included\n    # in the optimal solution\n    if (wt[n-1] > W):\n        return knapSack(W, wt, val, n-1)\n \n    # return the maximum of two cases:\n    # (1) nth item included\n    # (2) not included\n    else:\n        return max(\n            val[n-1] + knapSack(\n                W-wt[n-1], wt, val, n-1),\n            knapSack(W, wt, val, n-1))\n \n# end of function knapSack\n \n# To test above function\nval = [30, 50, 70]\nwt = [2, 3, 4]\nW = 5\nn = len(val)\nsolution = knapSack(W, wt, val, n)\n```\n\nIn this code, we define a function `knapSack` which takes the capacity of the knapsack, list of weights, list of values, and the total number of items as its arguments. It returns the maximum value that can be put in the knapsack of given capacity.\n\nWe then define the values and weights of the items, and the capacity of the knapsack. We call the `knapSack` function with these values and store the result in the variable `solution`.\n\nNote: The items' weights and values are assumed to be in the same order, i.e., the item with weight `wt[i]` has value `val[i]`.",
    "code": "def knapSack(W, wt, val, n):\n \n    # Base Case\n    if n == 0 or W == 0 :\n        return 0\n \n    # If weight of the nth item is\n    # more than Knapsack of capacity W,\n    # then this item cannot be included\n    # in the optimal solution\n    if (wt[n-1] > W):\n        return knapSack(W, wt, val, n-1)\n \n    # return the maximum of two cases:\n    # (1) nth item included\n    # (2) not included\n    else:\n        return max(\n            val[n-1] + knapSack(\n                W-wt[n-1], wt, val, n-1),\n            knapSack(W, wt, val, n-1))\n \n# end of function knapSack\n \n# To test above function\nval = [30, 50, 70]\nwt = [2, 3, 4]\nW = 5\nn = len(val)\nsolution = knapSack(W, wt, val, n)",
    "solution": 80
}