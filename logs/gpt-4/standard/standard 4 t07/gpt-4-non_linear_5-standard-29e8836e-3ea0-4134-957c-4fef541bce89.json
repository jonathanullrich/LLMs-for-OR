{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.",
    "output": "The problem is a linear programming problem and can be solved using Python's PuLP library. Before coding, let's define our decision variables, objective function, and constraints.\n\nDecision Variables:\nx1: The number of units of product 1 to be produced.\nx2: The number of units of product 2 to be produced.\nx3: The number of units of product 3 to be produced.\n\nObjective Function:\nMaximize profit = 360*x1 (for first 15 units) + 30*(x1-15) (for additional units) + 240*x2 (for first 20 units) + 120*(x2-20) (for next 20 units) + 90*(x2-40) (for additional units) + 450*x3 (for first 20 units) + 300*(x3-20) (for next 10 units) + 180*(x3-30) (for additional units)\n\nConstraints:\nx1 + x2 + x3 <= 60\n3*x1 + 2*x2 <= 200\nx1 + 2*x3 <= 70\n\nThe Python code using PuLP library to solve this problem is as follows:\n\n```python\nfrom pulp import *\n\n# Create a LP Maximization problem\nprob = LpProblem(\"Maximization Problem\", LpMaximize)\n\n# Create problem variables\nx1 = LpVariable(\"x1\", lowBound = 0)   # x1 >= 0\nx2 = LpVariable(\"x2\", lowBound = 0)   # x2 >= 0\nx3 = LpVariable(\"x3\", lowBound = 0)   # x3 >= 0\n\n# Objective function\nprob += 360*min(15,x1) + 30*max(0,x1-15) + 240*min(20,x2) + 120*max(0,min(20,x2-20)) + 90*max(0,x2-40) + 450*min(20,x3) + 300*max(0,min(10,x3-20)) + 180*max(0,x3-30), \"Profit\"\n\n# Constraints\nprob += x1 + x2 + x3 <= 60\nprob += 3*x1 + 2*x2 <= 200\nprob += x1 + 2*x3 <= 70\n\n# Solve our problem\nprob.solve()\nsolution = value(prob.objective)\n```\n\nThis code will give the maximum profit that can be achieved under the given constraints. The optimized number of units to be produced for each product can be obtained by checking the values of x1, x2, and x3 after the problem is solved.",
    "code": "from pulp import *\n\n# Create a LP Maximization problem\nprob = LpProblem(\"Maximization Problem\", LpMaximize)\n\n# Create problem variables\nx1 = LpVariable(\"x1\", lowBound = 0)   # x1 >= 0\nx2 = LpVariable(\"x2\", lowBound = 0)   # x2 >= 0\nx3 = LpVariable(\"x3\", lowBound = 0)   # x3 >= 0\n\n# Objective function\nprob += 360*min(15,x1) + 30*max(0,x1-15) + 240*min(20,x2) + 120*max(0,min(20,x2-20)) + 90*max(0,x2-40) + 450*min(20,x3) + 300*max(0,min(10,x3-20)) + 180*max(0,x3-30), \"Profit\"\n\n# Constraints\nprob += x1 + x2 + x3 <= 60\nprob += 3*x1 + 2*x2 <= 200\nprob += x1 + 2*x3 <= 70\n\n# Solve our problem\nprob.solve()\nsolution = value(prob.objective)",
    "solution": "COMPILE_ERROR"
}