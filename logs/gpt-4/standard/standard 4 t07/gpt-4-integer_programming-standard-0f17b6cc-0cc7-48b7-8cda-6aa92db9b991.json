{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: A young couple, Eve and Steven, want to divide their main household chores (marketing, cooking, dishwashing, and laundering) between them so that each has two tasks but the total time they spend on household duties is kept to a minimum. Their efficiencies on these tasks differ, where the time each would need to perform the task is given by the following. Eve needs 4.5 hours for Marketing, 7.8 hours for Cooking, 3.6 hours for Dishwashing and 2.9 hours for Laundry. Steven needs 4.9 hours for Marketing, 7.2 hours for Cooking, 4.3 hours for Dishwashing and 3.1 hours for Laundry. Calculate the miminum time spend to do the chores.",
    "output": "Here is a possible solution using Python and its built-in minimum function. It involves creating lists of the times each person needs for each task and finding the minimum time for each task.\n\n```python\n# List of tasks\ntasks = ['Marketing', 'Cooking', 'Dishwashing', 'Laundry']\n\n# Time needed by Eve for each task\neve_times = [4.5, 7.8, 3.6, 2.9]\n\n# Time needed by Steven for each task\nsteven_times = [4.9, 7.2, 4.3, 3.1]\n\n# Create a dictionary with tasks as keys and minimum times as values\ntask_times = {task: min(eve_times[i], steven_times[i]) for i, task in enumerate(tasks)}\n\n# Sort the dictionary by values in ascending order\nsorted_tasks = sorted(task_times.items(), key=lambda x: x[1])\n\n# Pick the two tasks with the smallest times\nsolution = sorted_tasks[0][1] + sorted_tasks[1][1]\n```\n\nThis code assumes that the couple can divide the tasks in such a way that each person does two tasks, and that the total time is minimized. It does not take into account whether a person prefers one task over another, or whether some tasks need to be done more often than others. It also assumes that the time taken by each person for each task is constant and does not change over time.",
    "code": "# List of tasks\ntasks = ['Marketing', 'Cooking', 'Dishwashing', 'Laundry']\n\n# Time needed by Eve for each task\neve_times = [4.5, 7.8, 3.6, 2.9]\n\n# Time needed by Steven for each task\nsteven_times = [4.9, 7.2, 4.3, 3.1]\n\n# Create a dictionary with tasks as keys and minimum times as values\ntask_times = {task: min(eve_times[i], steven_times[i]) for i, task in enumerate(tasks)}\n\n# Sort the dictionary by values in ascending order\nsorted_tasks = sorted(task_times.items(), key=lambda x: x[1])\n\n# Pick the two tasks with the smallest times\nsolution = sorted_tasks[0][1] + sorted_tasks[1][1]",
    "solution": 6.5
}