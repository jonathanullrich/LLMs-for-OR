{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: A young couple, Eve and Steven, want to divide their main household chores (marketing, cooking, dishwashing, and laundering) between them so that each has two tasks but the total time they spend on household duties is kept to a minimum. Their efficiencies on these tasks differ, where the time each would need to perform the task is given by the following. Eve needs 4.5 hours for Marketing, 7.8 hours for Cooking, 3.6 hours for Dishwashing and 2.9 hours for Laundry. Steven needs 4.9 hours for Marketing, 7.2 hours for Cooking, 4.3 hours for Dishwashing and 3.1 hours for Laundry. Calculate the miminum time spend to do the chores.",
    "output": "Here is the Python code using linear programming to solve the problem:\n\n```python\nfrom scipy.optimize import linprog\n\n# Coefficients of the linear objective function to be minimized\nc = [4.5, 7.8, 3.6, 2.9, 4.9, 7.2, 4.3, 3.1]\n\n# Coefficients matrix for the inequality constraints\nA = [[1, 1, 0, 0, -1, 0, 0, 0],\n     [0, 0, 1, 1, 0, -1, 0, 0],\n     [1, 0, 1, 0, 0, 0, -1, 0],\n     [0, 1, 0, 1, 0, 0, 0, -1]]\n\n# Right-hand side of the inequality constraints\nb = [0, 0, 0, 0]\n\n# Bounds for each variable in the solution (all are non-negative)\nx0_bounds = (0, None)\nx1_bounds = (0, None)\nx2_bounds = (0, None)\nx3_bounds = (0, None)\nx4_bounds = (0, None)\nx5_bounds = (0, None)\nx6_bounds = (0, None)\nx7_bounds = (0, None)\n\n# Solve the linear programming problem\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds, x2_bounds, x3_bounds, x4_bounds, x5_bounds, x6_bounds, x7_bounds])\n\n# Round the result to 2 decimal places and assign it to the variable 'solution'\nsolution = round(res.fun, 2)\n```\n\nPlease note that in the code above, we are assuming that Eve and Steven can perform a fraction of a task. If they must perform whole tasks, the problem would be an integer linear programming problem, which cannot be solved using the `linprog` function from `scipy.optimize`.",
    "code": "from scipy.optimize import linprog\n\n# Coefficients of the linear objective function to be minimized\nc = [4.5, 7.8, 3.6, 2.9, 4.9, 7.2, 4.3, 3.1]\n\n# Coefficients matrix for the inequality constraints\nA = [[1, 1, 0, 0, -1, 0, 0, 0],\n     [0, 0, 1, 1, 0, -1, 0, 0],\n     [1, 0, 1, 0, 0, 0, -1, 0],\n     [0, 1, 0, 1, 0, 0, 0, -1]]\n\n# Right-hand side of the inequality constraints\nb = [0, 0, 0, 0]\n\n# Bounds for each variable in the solution (all are non-negative)\nx0_bounds = (0, None)\nx1_bounds = (0, None)\nx2_bounds = (0, None)\nx3_bounds = (0, None)\nx4_bounds = (0, None)\nx5_bounds = (0, None)\nx6_bounds = (0, None)\nx7_bounds = (0, None)\n\n# Solve the linear programming problem\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds, x2_bounds, x3_bounds, x4_bounds, x5_bounds, x6_bounds, x7_bounds])\n\n# Round the result to 2 decimal places and assign it to the variable 'solution'\nsolution = round(res.fun, 2)",
    "solution": 0.0
}