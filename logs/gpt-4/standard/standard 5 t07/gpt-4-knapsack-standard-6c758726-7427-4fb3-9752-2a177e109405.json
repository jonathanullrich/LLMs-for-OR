{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: A hiker has a 5-ft^3 backpack and needs to decide on the most valuable items to take on the hiking trip. There are three items from which to choose. Their volumes are 2, 3, and 4 ft^3, and the hiker estimates their associated values on a scale from 0 to 100 as 30, 50, and 70, respectively. Find the optimal solution.",
    "output": "This is a classic example of a Knapsack Problem, which is a problem in combinatorial optimization. \n\nHere is a Python code that uses dynamic programming to solve it:\n\n```python\ndef knapSack(W, wt, val, n):\n    K = [[0 for w in range(W + 1)]\n            for i in range(n + 1)]\n             \n    # Build table K[][] in bottom\n    # up manner\n    for i in range(n + 1):\n        for w in range(W + 1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i - 1] <= w:\n                K[i][w] = max(val[i - 1]\n                  + K[i - 1][w - wt[i - 1]],\n                               K[i - 1][w])\n            else:\n                K[i][w] = K[i - 1][w]\n \n    return K[n][W]\n \n# Driver code\nval = [30, 50, 70]\nwt = [2, 3, 4]\nW = 5\nn = len(val)\n\nsolution = knapSack(W, wt, val, n)\n```\nIn this code, `knapSack` is a function that calculates the maximum value that can be put in a knapsack of capacity `W` (the size of the backpack). The function takes four arguments: `W`, `wt` (the list of the volumes of the items), `val` (the list of the values of the items), and `n` (the number of items). It returns the maximum value that can be put in the knapsack.\n\nThe code then initializes the `val`, `wt`, `W`, and `n` variables with the given problem values and calls the `knapSack` function, storing the result in the `solution` variable.",
    "code": "def knapSack(W, wt, val, n):\n    K = [[0 for w in range(W + 1)]\n            for i in range(n + 1)]\n             \n    # Build table K[][] in bottom\n    # up manner\n    for i in range(n + 1):\n        for w in range(W + 1):\n            if i == 0 or w == 0:\n                K[i][w] = 0\n            elif wt[i - 1] <= w:\n                K[i][w] = max(val[i - 1]\n                  + K[i - 1][w - wt[i - 1]],\n                               K[i - 1][w])\n            else:\n                K[i][w] = K[i - 1][w]\n \n    return K[n][W]\n \n# Driver code\nval = [30, 50, 70]\nwt = [2, 3, 4]\nW = 5\nn = len(val)\n\nsolution = knapSack(W, wt, val, n)",
    "solution": 80
}