{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.",
    "output": "This is a linear programming problem. We'll use the scipy.optimize.linprog function. However, we need to modify the problem a bit because the linprog function minimizes the objective function, while we want to maximize it. We can do this by multiplying the objective function by -1, and then the solution will also be multiplied by -1 to get the correct result. Also, linprog doesn't support different coefficients for different ranges of variables, so we'll have to use binary variables to represent whether we are in the first range or not.\n\n```python\nfrom scipy.optimize import linprog\n\n# Define the objective function. Multiply by -1 to maximize.\nc = [-360, -30, -240, -120, -90, -450, -300, -180]\n\n# Define the constraints.\nA = [[1, 1, 1, 1, 1, 1, 1, 1],\n     [3, 0, 2, 0, 0, 0, 0, 0],\n     [1, 0, 0, 0, 0, 2, 2, 2],\n     [1, -1, 0, 0, 0, 0, 0, 0],\n     [0, 0, 1, -1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 1, -1, 0]]\n\nb = [60, 200, 70, 0, 0, 0]\n\n# Define the bounds for the variables.\nx0_bounds = (0, 15)\nx1_bounds = (0, None)\nx2_bounds = (0, 20)\nx3_bounds = (0, 20)\nx4_bounds = (0, None)\nx5_bounds = (0, 20)\nx6_bounds = (0, 10)\nx7_bounds = (0, None)\n\n# Solve the problem.\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds, x2_bounds, x3_bounds, x4_bounds, x5_bounds, x6_bounds, x7_bounds], method='highs')\n\n# The solution is the negative of the result because we multiplied the objective function by -1.\nsolution = -res.fun\n```\nNote that this code assumes that the optimal solution is integer, which might not be the case in real-world problems. This could be solved with integer programming.",
    "code": "from scipy.optimize import linprog\n\n# Define the objective function. Multiply by -1 to maximize.\nc = [-360, -30, -240, -120, -90, -450, -300, -180]\n\n# Define the constraints.\nA = [[1, 1, 1, 1, 1, 1, 1, 1],\n     [3, 0, 2, 0, 0, 0, 0, 0],\n     [1, 0, 0, 0, 0, 2, 2, 2],\n     [1, -1, 0, 0, 0, 0, 0, 0],\n     [0, 0, 1, -1, 0, 0, 0, 0],\n     [0, 0, 0, 0, 0, 1, -1, 0]]\n\nb = [60, 200, 70, 0, 0, 0]\n\n# Define the bounds for the variables.\nx0_bounds = (0, 15)\nx1_bounds = (0, None)\nx2_bounds = (0, 20)\nx3_bounds = (0, 20)\nx4_bounds = (0, None)\nx5_bounds = (0, 20)\nx6_bounds = (0, 10)\nx7_bounds = (0, None)\n\n# Solve the problem.\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds, x2_bounds, x3_bounds, x4_bounds, x5_bounds, x6_bounds, x7_bounds], method='highs')\n\n# The solution is the negative of the result because we multiplied the objective function by -1.\nsolution = -res.fun",
    "solution": 15150.0
}