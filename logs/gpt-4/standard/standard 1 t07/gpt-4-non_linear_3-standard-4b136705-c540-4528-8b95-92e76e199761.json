{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: A stockbroker has just received a call from his most important client, Ann. Ann has $50,000 to invest and wants to use it to purchase two stocks. Stock 1 is a solid blue-chip security with a respectable growth potential and little risk involved. Stock 2 is much more speculative. It is being touted in two investment newsletters as having outstanding growth potential but also is considered very risky. Ann would like a large return on her investment but also has considerable aversion to risk. Therefore, she has instructed Richard to analyze what mix of investments in the two stocks would be appropriate for her. Ann is used to talking in units of 1,000 dollars and 1,000-share blocks of stocks. Using these units, the price per block is 20 for stock 1 and 30 for stock 2. After doing some research, Richard has made the following estimates. The expected return per block is 5 for stock 1 and 10 for stock 2. The variance of the return on each block is 4 for stock 1 and 100 for stock 2. The covariance of the return on one block each of the two stocks is 5. Calculate the minimum amount of dollars Ann has to invest to achieve a return of 15 percent.",
    "output": "# We can set up the problem as a quadratic programming problem where we minimize the portfolio variance subject to the constraint that the expected return is at least 15 percent. We use the cvxpy library to solve the quadratic programming problem.\n\nimport cvxpy as cp\nimport numpy as np\n\n# Define the parameters\nprice_per_block = np.array([20, 30])\nexpected_return_per_block = np.array([5, 10])\nvariance_per_block = np.array([4, 100])\ncovariance = 5\ntarget_return = 0.15\nbudget = 50000\n\n# Define the decision variables (i.e., the number of blocks of each stock to buy)\nx = cp.Variable(2, nonneg=True)\n\n# Define the objective function (i.e., the portfolio variance)\nobjective = cp.Minimize(x[0]**2 * variance_per_block[0] + x[1]**2 * variance_per_block[1] + 2 * x[0] * x[1] * covariance)\n\n# Define the constraints\nconstraints = [x[0] * expected_return_per_block[0] + x[1] * expected_return_per_block[1] >= target_return * budget,\n               x[0] * price_per_block[0] + x[1] * price_per_block[1] <= budget]\n\n# Define and solve the problem\nproblem = cp.Problem(objective, constraints)\nproblem.solve()\n\n# The final output is the minimum investment required to achieve a return of 15 percent\nsolution = x.value @ price_per_block * 1000\nsolution = round(solution, 2)\nsolution",
    "code": "",
    "solution": "COMPILE_ERROR"
}