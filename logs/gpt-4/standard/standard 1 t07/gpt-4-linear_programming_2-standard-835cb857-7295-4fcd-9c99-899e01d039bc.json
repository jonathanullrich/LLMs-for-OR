{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: This is your lucky day. You have just won a $20,000 prize. You are setting aside $8,000 for taxes and partying expenses, but you have decided to invest the other $12,000. Upon hearing this news, two different friends have offered you an opportunity to become a partner in two different entrepreneurial ventures, one planned by each friend. In both cases, this investment would involve expending some of your time next summer as well as putting up cash. Becoming a full partner in the first friend\u2019s venture would require an investment of $10,000 and 400 hours, and your estimated profit (ignoring the value of your time) would be $9,000. The corresponding figures for the second friend\u2019s venture are $8,000 and 500 hours, with an estimated profit to you of $9,000. However, both friends are flexible and would allow you to come in at any fraction of a full partnership you would like. If you choose a fraction of a full partnership, all the above figures given for a full partnership (money investment, time investment, and your profit) would be multiplied by this same fraction. Because you were looking for an interesting summer job anyway (maximum of 600 hours), you have decided to participate in one or both friends\u2019 ventures in whichever combination would maximize your total estimated profit. You now need to solve the problem of finding the best combination.",
    "output": "This is an optimization problem, which can be solved using linear programming. Python's scipy library provides a method called linprog for solving linear programming problems. Here is how you can solve this problem:\n\n```python\nfrom scipy.optimize import linprog\n\n# Define the objective function. We want to maximize profit, so we negate the coefficients.\nc = [-9000, -9000] \n\n# Define the inequality constraints matrix. Each row of matrix A corresponds to a constraint.\nA = [[10000, 8000], [400, 500]]\n\n# Define the inequality constraints vector. Each element of vector b corresponds to a constraint.\nb = [12000, 600]\n\n# Solve the problem.\nresult = linprog(c, A_ub=A, b_ub=b, method='highs')\n\n# The optimal solution.\nsolution = result.fun * -1\n```\n\nThis code first defines the objective function and the constraints, and then calls the linprog function to solve the problem. It assigns the optimal solution to the variable 'solution'. Note that the objective function is negated because linprog function minimizes the objective function by default, and we want to maximize the profit.\n\nPlease remember to install scipy if you haven't done so using the following pip command:\n```python\npip install scipy\n```",
    "code": "from scipy.optimize import linprog\n\n# Define the objective function. We want to maximize profit, so we negate the coefficients.\nc = [-9000, -9000] \n\n# Define the inequality constraints matrix. Each row of matrix A corresponds to a constraint.\nA = [[10000, 8000], [400, 500]]\n\n# Define the inequality constraints vector. Each element of vector b corresponds to a constraint.\nb = [12000, 600]\n\n# Solve the problem.\nresult = linprog(c, A_ub=A, b_ub=b, method='highs')\n\n# The optimal solution.\nsolution = result.fun * -1\npip install scipy",
    "solution": "COMPILE_ERROR"
}