{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?",
    "examples": null,
    "output": "Firstly, we need to set up the problem as a linear program. We can create two decision variables, let's call them x1 and x2, to represent the number of units of product 1 and product 2 to produce respectively.\n\nThe objective function (which we want to maximize) is the total profit, which is $1*x1 + $2*x2.\n\nThen, we have the constraints:\n- x1 + 3*x2 <= 200 (the constraint for the frame parts),\n- 2*x1 + 2*x2 <= 300 (the constraint for the electrical components),\n- x2 <= 60 (the constraint for the maximum production of product 2).\n- x1, x2 >= 0 (the non-negativity constraints)\n\nWe can solve this linear program using scipy's linprog function.\n\nHere is the python code to solve the problem:\n\n```python\nfrom scipy.optimize import linprog\n\nc = [-1, -2]  # Coefficients for the objective function (we want to maximize)\n\nA = [[1, 3], [2, 2]]  # Coefficients for the inequalities\nb = [200, 300]  # Right-hand side of the inequalities\n\nx0_bounds = (0, None)  # Bounds for x1\nx1_bounds = (0, 60)  # Bounds for x2\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='highs')\n\nsolution = -res.fun\n```\nWith this code, we first define the coefficients for the objective function and the inequalities. Then we specify the bounds for the decision variables. We call the linprog function to solve the linear program, and finally get the optimal value of the objective function from the result object. The negative sign is because linprog function minimizes the objective function, so we have to negate it to get the maximum value.",
    "code": "from scipy.optimize import linprog\n\nc = [-1, -2]  # Coefficients for the objective function (we want to maximize)\n\nA = [[1, 3], [2, 2]]  # Coefficients for the inequalities\nb = [200, 300]  # Right-hand side of the inequalities\n\nx0_bounds = (0, None)  # Bounds for x1\nx1_bounds = (0, 60)  # Bounds for x2\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='highs')\n\nsolution = -res.fun",
    "solution": 175.0
}