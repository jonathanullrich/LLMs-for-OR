{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": "First, we can identify that this is a linear programming problem as we are trying to maximize profit (our objective function) subject to certain constraints (the availability of frame parts and electrical components, and the maximum number of product 2 that can be sold for a profit).\n\nWe can express our problem as follows:\n\nMaximize:\nP = 1*X1 + 2*X2\n\nSubject to:\nX1 + 3*X2 <= 200 (availability of frame parts)\n2*X1 + 2*X2 <= 300 (availability of electrical components)\nX2 <= 60 (maximum number of product 2 that can be sold for a profit)\n\nWhere:\nX1 = number of product 1 to be produced\nX2 = number of product 2 to be produced\n\nWe can use the pulp library in Python, which is used for solving linear programming problems. Here is the Python code to solve this problem:\n\n```python\nimport pulp\n\n# Define the problem\nprob = pulp.LpProblem(\"WorldLight Company\", pulp.LpMaximize)\n\n# Variables\nx1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')\nx2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')\n\n# Objective function\nprob += 1*x1 + 2*x2, \"Profit\"\n\n# Constraints\nprob += x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\nprob += x2 <= 60, \"Product 2 limit\"\n\n# Solve the problem\nprob.solve()\n\nsolution = pulp.value(prob.objective)\n```\n\nIn the code above, we first define the problem and specify that it is a maximization problem. Then, we define our decision variables x1 and x2, specifying that they must be greater than or equal to 0 and must be integers. We then add our objective function and our constraints to the problem. Finally, we solve the problem and store the final value of the objective function (i.e., the maximum profit) in the variable 'solution'.", "code": "import pulp\n\n# Define the problem\nprob = pulp.LpProblem(\"WorldLight Company\", pulp.LpMaximize)\n\n# Variables\nx1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')\nx2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')\n\n# Objective function\nprob += 1*x1 + 2*x2, \"Profit\"\n\n# Constraints\nprob += x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\nprob += x2 <= 60, \"Product 2 limit\"\n\n# Solve the problem\nprob.solve()\n\nsolution = pulp.value(prob.objective)", "solution": 175.0}