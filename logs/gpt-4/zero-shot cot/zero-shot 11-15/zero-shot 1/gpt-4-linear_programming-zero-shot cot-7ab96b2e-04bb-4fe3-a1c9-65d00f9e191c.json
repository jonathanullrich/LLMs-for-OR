{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": "The first thing to do is to define the problem as a linear programming problem. The decision variables are the number of units of product 1 and 2 to produce. The objective is to maximize the total profit. The constraints are the availability of frame parts and electrical components, and the restriction on the number of units of product 2 that can be produced for profit.\n\nLet's denote the number of units of product 1 and 2 as x1 and x2 respectively. The problem can be formulated as follows:\n\nMaximize: profit = 1*x1 + 2*x2\nSubject to:\n1*x1 + 3*x2 <= 200  (availability of frame parts)\n2*x1 + 2*x2 <= 300  (availability of electrical components)\nx2 <= 60  (restriction on the number of units of product 2)\n\nWhere x1, x2 >= 0.\n\nThis is a linear programming problem and can be solved using Python's PuLP library. The code for solving this problem would be as follows:\n\n```python\nfrom pulp import *\n\n# Create a problem variable\nprob = LpProblem(\"Maximize Profit\", LpMaximize)\n\n# Create decision variables\nx1 = LpVariable(\"Product_1_units\", 0, None, LpInteger)\nx2 = LpVariable(\"Product_2_units\", 0, 60, LpInteger)\n\n# Objective function\nprob += 1*x1 + 2*x2, \"Total Profit\"\n\n# Constraints\nprob += 1*x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\n\n# Solve the problem\nprob.solve()\n\n# Print the results\nprint(\"Status:\", LpStatus[prob.status])\nfor v in prob.variables():\n    print(v.name, \"=\", v.varValue)\nprint(\"Total Profit = \", value(prob.objective))\n```\n\nThis code will print the optimal number of units to produce for each product and the total profit.", "code": "from pulp import *\n\n# Create a problem variable\nprob = LpProblem(\"Maximize Profit\", LpMaximize)\n\n# Create decision variables\nx1 = LpVariable(\"Product_1_units\", 0, None, LpInteger)\nx2 = LpVariable(\"Product_2_units\", 0, 60, LpInteger)\n\n# Objective function\nprob += 1*x1 + 2*x2, \"Total Profit\"\n\n# Constraints\nprob += 1*x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\n\n# Solve the problem\nprob.solve()\n\n# Print the results\nprint(\"Status:\", LpStatus[prob.status])\nfor v in prob.variables():\n    print(v.name, \"=\", v.varValue)\nprint(\"Total Profit = \", value(prob.objective))", "solution": "RUNTIME_ERROR"}