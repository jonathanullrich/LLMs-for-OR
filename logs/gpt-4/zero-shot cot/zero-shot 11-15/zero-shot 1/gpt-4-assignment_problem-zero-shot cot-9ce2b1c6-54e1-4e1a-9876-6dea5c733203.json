{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are for Backstroke: Carl (37.7), Chris (32.9), David (33.8), Tony (37.0), Ken (35.4); for Breaststroke: Carl (43.4), Chris (33.1), David (42.2), Tony (34.7), Ken (41.8); for Butterfly: Carl (33.3), Chris (28.5), David (38.9), Tony (30.4), Ken (33.6); for Freestyle: Carl (29.2), Chris (26.4), David (29.6), Tony (28.5), Ken (31.1). The coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times. Find the minimum time spend.",
    "examples": null,
    "output": "First, we need to represent the problem mathematically. We can use a matrix to represent the times for each swimmer in each stroke. Each row will represent a swimmer and each column will represent a stroke. The value at row i and column j will represent the time for swimmer i in stroke j.\n\nNext, we need to find a way to assign each swimmer to a unique stroke in a way that minimizes the total time. This is known as the assignment problem, which is a type of combinatorial optimization problem. It can be solved using the Hungarian algorithm.\n\nLet's write a Python code to solve this problem using the scipy library, which provides a function to solve the assignment problem using the Hungarian algorithm. We will use the linear_sum_assignment function from the scipy.optimize module.\n\nHere is the Python code to solve the problem:\n\n```python\nimport numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n# Define the cost matrix\ncost = np.array([[37.7, 43.4, 33.3, 29.2],  # Carl\n                 [32.9, 33.1, 28.5, 26.4],  # Chris\n                 [33.8, 42.2, 38.9, 29.6],  # David\n                 [37.0, 34.7, 30.4, 28.5],  # Tony\n                 [35.4, 41.8, 33.6, 31.1]]) # Ken\n\n# Solve the assignment problem\nrow_ind, col_ind = linear_sum_assignment(cost)\n\n# Compute the minimum time\nsolution = cost[row_ind, col_ind].sum()\n```\n\nThe code first defines the cost matrix, where each row represents a swimmer and each column represents a stroke. The value at row i and column j represents the time for swimmer i in stroke j.\n\nThe code then calls the linear_sum_assignment function to solve the assignment problem. This function returns two arrays: row_ind and col_ind. The i-th element in row_ind and the i-th element in col_ind together represent an assignment of a swimmer to a stroke.\n\nFinally, the code computes the minimum time by adding up the times for the assigned swimmers and strokes.",
    "code": "import numpy as np\nfrom scipy.optimize import linear_sum_assignment\n\n# Define the cost matrix\ncost = np.array([[37.7, 43.4, 33.3, 29.2],  # Carl\n                 [32.9, 33.1, 28.5, 26.4],  # Chris\n                 [33.8, 42.2, 38.9, 29.6],  # David\n                 [37.0, 34.7, 30.4, 28.5],  # Tony\n                 [35.4, 41.8, 33.6, 31.1]]) # Ken\n\n# Solve the assignment problem\nrow_ind, col_ind = linear_sum_assignment(cost)\n\n# Compute the minimum time\nsolution = cost[row_ind, col_ind].sum()",
    "solution": 126.2
}