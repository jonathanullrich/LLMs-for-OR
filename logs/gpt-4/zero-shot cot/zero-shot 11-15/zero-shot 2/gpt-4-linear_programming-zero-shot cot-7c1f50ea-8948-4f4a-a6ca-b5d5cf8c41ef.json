{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": "Sure, let's break it down:\n\n1. We need to maximize the profit given the constraints of available frame parts and electrical components.\n\n2. Let's denote the number of units of product 1 to produce as x and the number of units of product 2 as y.\n\n3. The profit is $1 per unit of product 1 and $2 per unit of product 2. So, the total profit P is P = x + 2y.\n\n4. Each unit of product 1 requires 1 unit of frame parts and 2 units of electrical components, so we have x + 3y <= 200 and 2x + 2y <= 300.\n\n5. However, we can only make profit on up to 60 units of product 2, so we have y <= 60.\n\nNow, we can formulate this as a linear programming problem and solve it using Python's scipy library.\n\nThe following Python code will do that:\n\n```python\nfrom scipy.optimize import linprog\n\n# Coefficients in the objective function\nc = [-1, -2]\n\n# Inequality constraints matrix\nA = [[1, 3], [2, 2]]\n\n# Inequality constraints vector\nb = [200, 300]\n\n# Bounds for each variable\nx_bounds = (0, None)\ny_bounds = (0, 60)\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')\n\n# The optimal solution\nsolution = -res.fun\n```\n\nThis will give you the maximum profit that can be achieved given the constraints.\n\nRemember, the linprog function minimizes the objective function by default. Since we want to maximize the profit, we can convert the problem into a minimization problem by negating the objective function. That's why we have -1 and -2 in the coefficients of the objective function and why we negate the final result.\n\nAlso, the bounds for each variable are set to be non-negative, since it doesn't make sense to produce a negative number of products.", "code": "from scipy.optimize import linprog\n\n# Coefficients in the objective function\nc = [-1, -2]\n\n# Inequality constraints matrix\nA = [[1, 3], [2, 2]]\n\n# Inequality constraints vector\nb = [200, 300]\n\n# Bounds for each variable\nx_bounds = (0, None)\ny_bounds = (0, 60)\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x_bounds, y_bounds], method='highs')\n\n# The optimal solution\nsolution = -res.fun", "solution": 175.0}