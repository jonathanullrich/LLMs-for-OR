{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: The coach of an age group swim team needs to assign swimmers to a 200-yard medley relay team to send to the Junior Olympics. Since most of his best swimmers are very fast in more than one stroke, it is not clear which swimmer should be assigned to each of the four strokes. The five fastest swimmers and the best times (in seconds) they have achieved in each of the strokes (for 50 yards) are for Backstroke: Carl (37.7), Chris (32.9), David (33.8), Tony (37.0), Ken (35.4); for Breaststroke: Carl (43.4), Chris (33.1), David (42.2), Tony (34.7), Ken (41.8); for Butterfly: Carl (33.3), Chris (28.5), David (38.9), Tony (30.4), Ken (33.6); for Freestyle: Carl (29.2), Chris (26.4), David (29.6), Tony (28.5), Ken (31.1). The coach wishes to determine how to assign four swimmers to the four different strokes to minimize the sum of the corresponding best times. Find the minimum time spend.",
    "examples": null,
    "output": "Firstly, we will import the required libraries. Then, we will define the data in a structured way. After that, we will define the decision variable in a way that helps us to find the best swimmer for each stroke. Then, we will set the objective which is to minimize the total time. Finally, we will define the constraints and solve the problem.\n\nHere is the python code:\n\n```python\nfrom ortools.linear_solver import pywraplp\n\n# Create the linear solver with the GLOP backend.\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n\n# Define the data\nstrokes = ['Backstroke', 'Breaststroke', 'Butterfly', 'Freestyle']\nswimmers = ['Carl', 'Chris', 'David', 'Tony', 'Ken']\ntimes = {'Carl': [37.7, 43.4, 33.3, 29.2], 'Chris': [32.9, 33.1, 28.5, 26.4], 'David': [33.8, 42.2, 38.9, 29.6], 'Tony': [37.0, 34.7, 30.4, 28.5], 'Ken': [35.4, 41.8, 33.6, 31.1]}\n\n# Define decision variables.\nx = {}\nfor swimmer in swimmers:\n    for stroke in strokes:\n        x[(swimmer, stroke)] = solver.NumVar(0, 1, '')\n\n# Define the objective.\nobjective = solver.Objective()\nfor swimmer in swimmers:\n    for stroke in strokes:\n        objective.SetCoefficient(x[(swimmer, stroke)], times[swimmer][strokes.index(stroke)])\nobjective.SetMinimization()\n\n# Define the constraints.\nfor stroke in strokes:\n    solver.Add(sum(x[(swimmer, stroke)] for swimmer in swimmers) == 1)\nfor swimmer in swimmers:\n    solver.Add(sum(x[(swimmer, stroke)] for stroke in strokes) <= 1)\n\n# Solve the system.\nsolver.Solve()\nsolution = objective.Value()\n```\n\nIn the above code, we first initialize a solver. Then, we define the data in a structured way. We then initialize the decision variables which are binary variables indicating if a swimmer performs a stroke or not. We then define the objective function which is to minimize the total time. We then define the constraints which ensure that each stroke is performed by exactly one swimmer and each swimmer performs at most one stroke. Finally, we solve the system and store the minimum time in the 'solution' variable.",
    "code": "from ortools.linear_solver import pywraplp\n\n# Create the linear solver with the GLOP backend.\nsolver = pywraplp.Solver.CreateSolver('GLOP')\n\n# Define the data\nstrokes = ['Backstroke', 'Breaststroke', 'Butterfly', 'Freestyle']\nswimmers = ['Carl', 'Chris', 'David', 'Tony', 'Ken']\ntimes = {'Carl': [37.7, 43.4, 33.3, 29.2], 'Chris': [32.9, 33.1, 28.5, 26.4], 'David': [33.8, 42.2, 38.9, 29.6], 'Tony': [37.0, 34.7, 30.4, 28.5], 'Ken': [35.4, 41.8, 33.6, 31.1]}\n\n# Define decision variables.\nx = {}\nfor swimmer in swimmers:\n    for stroke in strokes:\n        x[(swimmer, stroke)] = solver.NumVar(0, 1, '')\n\n# Define the objective.\nobjective = solver.Objective()\nfor swimmer in swimmers:\n    for stroke in strokes:\n        objective.SetCoefficient(x[(swimmer, stroke)], times[swimmer][strokes.index(stroke)])\nobjective.SetMinimization()\n\n# Define the constraints.\nfor stroke in strokes:\n    solver.Add(sum(x[(swimmer, stroke)] for swimmer in swimmers) == 1)\nfor swimmer in swimmers:\n    solver.Add(sum(x[(swimmer, stroke)] for stroke in strokes) <= 1)\n\n# Solve the system.\nsolver.Solve()\nsolution = objective.Value()",
    "solution": 126.2
}