{
    "system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.",
    "problem_description": "Consider the following problem: This is your lucky day. You have just won a $20,000 prize. You are setting aside $8,000 for taxes and partying expenses, but you have decided to invest the other $12,000. Upon hearing this news, two different friends have offered you an opportunity to become a partner in two different entrepreneurial ventures, one planned by each friend. In both cases, this investment would involve expending some of your time next summer as well as putting up cash. Becoming a full partner in the first friend\u2019s venture would require an investment of $10,000 and 400 hours, and your estimated profit (ignoring the value of your time) would be $9,000. The corresponding figures for the second friend\u2019s venture are $8,000 and 500 hours, with an estimated profit to you of $9,000. However, both friends are flexible and would allow you to come in at any fraction of a full partnership you would like. If you choose a fraction of a full partnership, all the above figures given for a full partnership (money investment, time investment, and your profit) would be multiplied by this same fraction. Because you were looking for an interesting summer job anyway (maximum of 600 hours), you have decided to participate in one or both friends\u2019 ventures in whichever combination would maximize your total estimated profit. You now need to solve the problem of finding the best combination.",
    "examples": null,
    "output": "Sure, let's break it down.\n\n1. First, we need to identify the variables. In this case, they are the fractions of partnership in each venture. Let's denote them as f1 and f2 for the first and second venture respectively.\n\n2. Next, we need to identify the constraints of the problem. We have two constraints here. The first one is the money constraint, which states that the total invested money should not exceed $12,000. The second one is the time constraint, which states that the total time invested should not exceed 600 hours.\n\n3. Then, we need to set up the objective function, which is the total profit we want to maximize. The profit from each venture is the invested fraction times the estimated profit.\n\n4. Now, we can use a linear programming solver to find the optimal fractions of partnership that maximize the profit while respecting the constraints.\n\nHere is a Python code using Scipy's Linear Programming function to solve the problem:\n\n```python\nfrom scipy.optimize import linprog\n\n# coefficients of the objective function\nc = [-9000, -9000]  # we want to maximize profit, so we use negative coefficients\n\n# inequality constraints matrix\nA = [[10000, 8000],  # money constraints\n     [400, 500]]  # time constraints\n\n# inequality constraints vector\nb = [12000, 600]  # total amount of money and total time\n\n# bounds of the variables\nx0_bounds = (0, None)\nx1_bounds = (0, None)\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='highs')\n\nsolution = -res.fun  # since we minimized -profit, we have to take the negative of the result to get the profit\n```\n\nIn this code, 'c' represents the coefficients in the objective function, 'A' represents the coefficients in the inequality constraints, 'b' represents the right-hand side of the inequality constraints, and 'bounds' represents the bounds of the variables. The 'linprog' function solves the problem and returns the result, which includes the optimal fractions of partnership and the maximum profit.",
    "code": "from scipy.optimize import linprog\n\n# coefficients of the objective function\nc = [-9000, -9000]  # we want to maximize profit, so we use negative coefficients\n\n# inequality constraints matrix\nA = [[10000, 8000],  # money constraints\n     [400, 500]]  # time constraints\n\n# inequality constraints vector\nb = [12000, 600]  # total amount of money and total time\n\n# bounds of the variables\nx0_bounds = (0, None)\nx1_bounds = (0, None)\n\nres = linprog(c, A_ub=A, b_ub=b, bounds=[x0_bounds, x1_bounds], method='highs')\n\nsolution = -res.fun  # since we minimized -profit, we have to take the negative of the result to get the profit",
    "solution": 12000.0
}