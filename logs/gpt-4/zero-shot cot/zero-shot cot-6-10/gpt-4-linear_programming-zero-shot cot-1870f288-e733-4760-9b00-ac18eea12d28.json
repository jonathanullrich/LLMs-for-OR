{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": "First, we need to identify the decision variables: these are the quantities of product 1 and product 2 that the company needs to decide on. Let's denote them by x1 and x2 respectively.\n\nSecond, the objective function, which is the total profit, is given by the equation: P = 1*x1 + 2*x2. The company wants to maximize this function.\n\nThird, we have the constraints. These are the limitations on the quantities of frame parts and electrical components. They can be represented by the following equations:\n\n1*x1 + 3*x2 <= 200 (frame parts)\n\n2*x1 + 2*x2 <= 300 (electrical components)\n\nAlso, we are given that x2 <= 60 (limitation on product 2)\n\nFinally, the quantities of the products must be non-negative, so x1 >= 0 and x2 >= 0.\n\nNow, let's use linear programming to solve this problem. There are several python libraries for this purpose, such as scipy and pulp. Here is the code using pulp:\n\n```python\nfrom pulp import LpMaximize, LpProblem, LpStatus, lpSum, LpVariable\n\n# Define the model\nmodel = LpProblem(name=\"WorldLight-Company\", sense=LpMaximize)\n\n# Initialize the decision variables\nx1 = LpVariable(name=\"x1\", lowBound=0)\nx2 = LpVariable(name=\"x2\", lowBound=0, upBound=60)\n\n# Add the constraints to the model\nmodel += (x1 + 3*x2 <= 200, \"Frame Parts\")\nmodel += (2*x1 + 2*x2 <= 300, \"Electrical Components\")\n\n# Set the objective\nmodel += lpSum([1*x1, 2*x2])\n\n# Solve the problem\nmodel.solve()\n\n# Get the optimal solution\nsolution = model.objective.value()\n\nprint(LpStatus[model.status])\nprint(\"Optimal Solution: \", solution)\n```\n\nThis code will print the status of the solution (whether it is optimal, infeasible, unbounded, etc.) and the maximum possible profit.", "code": "from pulp import LpMaximize, LpProblem, LpStatus, lpSum, LpVariable\n\n# Define the model\nmodel = LpProblem(name=\"WorldLight-Company\", sense=LpMaximize)\n\n# Initialize the decision variables\nx1 = LpVariable(name=\"x1\", lowBound=0)\nx2 = LpVariable(name=\"x2\", lowBound=0, upBound=60)\n\n# Add the constraints to the model\nmodel += (x1 + 3*x2 <= 200, \"Frame Parts\")\nmodel += (2*x1 + 2*x2 <= 300, \"Electrical Components\")\n\n# Set the objective\nmodel += lpSum([1*x1, 2*x2])\n\n# Solve the problem\nmodel.solve()\n\n# Get the optimal solution\nsolution = model.objective.value()\n\nprint(LpStatus[model.status])\nprint(\"Optimal Solution: \", solution)", "solution": 175.0}