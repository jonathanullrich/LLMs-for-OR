{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.", "examples": null, "output": "Sure, here are the steps and the python code to solve the problem:\n\nStep 1: We need to formulate the problem as a linear programming problem. The objective function is the total profit, which we want to maximize. The constraints are given by the limitations on the use of resources.\n\nStep 2: We will use the PuLP library, which is a free open source software written in Python. It is used to describe optimization problems as mathematical models.\n\nPython code:\n\n```python\nfrom pulp import LpMaximize, LpProblem, LpStatus, lpSum, LpVariable\n\n# Define the model\nmodel = LpProblem(name=\"MFG_corporation_profit_maximization\", sense=LpMaximize)\n\n# Initialize the decision variables: x1 is the number of units of product 1, \n# x2 is the number of units of product 2, and x3 is the number of units of product 3.\nx1 = LpVariable(name=\"x1\", lowBound=0)\nx2 = LpVariable(name=\"x2\", lowBound=0)\nx3 = LpVariable(name=\"x3\", lowBound=0)\n\n# Add the constraints to the model\nmodel += (x1 + x2 + x3 <= 60, \"resource_constraint_1\")\nmodel += (3*x1 + 2*x2 <= 200, \"resource_constraint_2\")\nmodel += (x1 + 2*x3 <= 70, \"resource_constraint_3\")\n\n# Add the objective function to the model\nmodel += lpSum([360*x1, 240*x2, 450*x3])\n\n# Solve the problem\nmodel.solve()\n\nsolution = LpStatus[model.status]\n\nfor var in model.variables():\n    print(f\"{var.name}: {var.value()}\")\n\nprint(f\"Optimal Solution: {model.objective.value()}\")\n```\nIn this code, we first define the model and the decision variables. We then add the constraints to the model and define the objective function. Finally, we solve the model and print the optimal solution.", "code": "from pulp import LpMaximize, LpProblem, LpStatus, lpSum, LpVariable\n\n# Define the model\nmodel = LpProblem(name=\"MFG_corporation_profit_maximization\", sense=LpMaximize)\n\n# Initialize the decision variables: x1 is the number of units of product 1, \n# x2 is the number of units of product 2, and x3 is the number of units of product 3.\nx1 = LpVariable(name=\"x1\", lowBound=0)\nx2 = LpVariable(name=\"x2\", lowBound=0)\nx3 = LpVariable(name=\"x3\", lowBound=0)\n\n# Add the constraints to the model\nmodel += (x1 + x2 + x3 <= 60, \"resource_constraint_1\")\nmodel += (3*x1 + 2*x2 <= 200, \"resource_constraint_2\")\nmodel += (x1 + 2*x3 <= 70, \"resource_constraint_3\")\n\n# Add the objective function to the model\nmodel += lpSum([360*x1, 240*x2, 450*x3])\n\n# Solve the problem\nmodel.solve()\n\nsolution = LpStatus[model.status]\n\nfor var in model.variables():\n    print(f\"{var.name}: {var.value()}\")\n\nprint(f\"Optimal Solution: {model.objective.value()}\")", "solution": "RUNTIME_ERROR"}