{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.", "examples": null, "output": "First, we can use the Python library PuLP, which is a free open-source linear programming library to model and solve linear and integer programs.\n\nThe goal here is to maximize the profit while respecting the constraints.\n\nLet's install the library first using pip: \n\n```python\n!pip install pulp\n```\n\nNow we can start by importing the library and defining the problem:\n\n```python\nimport pulp\n\n# Instantiate our problem class\nmodel = pulp.LpProblem(\"Profit maximising problem\", pulp.LpMaximize)\n```\n\nNext, we can define our decision variables:\n\n```python\nx1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')\nx2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')\nx3 = pulp.LpVariable('x3', lowBound=0, cat='Integer')\n```\n\nTo express the profit functions and constraints in a single linear expression, we can define three separate profit functions for each product and then add them together:\n\n```python\nprofit_x1 = 360*min(15, x1) + 30*max(0, x1-15)\nprofit_x2 = 240*min(20, x2) + 120*max(0, x2-20) + 90*max(0, x2-40)\nprofit_x3 = 450*min(20, x3) + 300*max(0, x3-20) + 180*max(0, x3-30)\n\ntotal_profit = profit_x1 + profit_x2 + profit_x3\n```\n\nThen we can add the objective function to our model:\n\n```python\nmodel += total_profit\n```\n\nNext, we add our constraints:\n\n```python\nmodel += x1 + x2 + x3 <= 60\nmodel += 3*x1 + 2*x2 <= 200\nmodel += x1 + 2*x3 <= 70\n```\n\nFinally, we can solve the model and print the results:\n\n```python\nmodel.solve()\nsolution = pulp.LpStatus[model.status], pulp.value(x1), pulp.value(x2), pulp.value(x3), pulp.value(model.objective)\n```\n\nThe Python code above will give you the optimal production levels for each product to maximize profit while respecting the constraints.", "code": "!pip install pulp\nimport pulp\n\n# Instantiate our problem class\nmodel = pulp.LpProblem(\"Profit maximising problem\", pulp.LpMaximize)\nx1 = pulp.LpVariable('x1', lowBound=0, cat='Integer')\nx2 = pulp.LpVariable('x2', lowBound=0, cat='Integer')\nx3 = pulp.LpVariable('x3', lowBound=0, cat='Integer')\nprofit_x1 = 360*min(15, x1) + 30*max(0, x1-15)\nprofit_x2 = 240*min(20, x2) + 120*max(0, x2-20) + 90*max(0, x2-40)\nprofit_x3 = 450*min(20, x3) + 300*max(0, x3-20) + 180*max(0, x3-30)\n\ntotal_profit = profit_x1 + profit_x2 + profit_x3\nmodel += total_profit\nmodel += x1 + x2 + x3 <= 60\nmodel += 3*x1 + 2*x2 <= 200\nmodel += x1 + 2*x3 <= 70\nmodel.solve()\nsolution = pulp.LpStatus[model.status], pulp.value(x1), pulp.value(x2), pulp.value(x3), pulp.value(model.objective)", "solution": "COMPILE_ERROR"}