{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The MFG Corporation is planning to produce and market three different products. Let x1, x2, and x3 denote the number of units of the three respective products to be produced. The preliminary estimates of their potential profitability are as follows. For the first 15 units produced of Product 1, the unit profit would be approximately $360. The unit profit would be only $30 for any additional units of Product 1. For the first 20 units produced of Product 2, the unit profit is estimated at $240. The unit profit would be $120 for each of the next 20 units and $90 for any additional units. For the first 20 units of Product 3, the unit profit would be $450. The unit profit would be $300 for each of the next 10 units and $180 for any additional units. Certain limitations on the use of needed resources impose the following constraints on the production of the three products: x1 + x2 + x3 <= 60, 3*x1 + 2*x2 <= 200, x1 + 2*x3 <= 70. Management wants to know what values of x1, x2 and x3 should be chosen to maximize the total profit.", "examples": null, "output": "This is a linear programming problem where we are trying to maximize the profit subject to certain constraints. The objective function (which we are trying to maximize) is the total profit, which is a piecewise linear function of x1, x2, and x3. The constraints are linear inequalities in x1, x2, and x3.\n\nYou can use Python and the pulp library, which is a powerful tool for linear programming, to solve this problem. Here is the Python code:\n\n```python\nfrom pulp import *\n\n# Create the 'prob' variable to contain the problem data\nprob = LpProblem(\"MFG Corporation Problem\", LpMaximize)\n\n# Create problem variables\nx1 = LpVariable(\"x1\", 0, None, LpInteger)\nx2 = LpVariable(\"x2\", 0, None, LpInteger)\nx3 = LpVariable(\"x3\", 0, None, LpInteger)\n\n# The objective function is added to 'prob' first\nprob += (360*15 + 30*(x1-15))*x1 + (240*20 + 120*20 + 90*(x2-40))*x2 + (450*20 + 300*10 + 180*(x3-30))*x3, \"Total Profit\"\n\n# The constraints are added to 'prob'\nprob += x1 + x2 + x3 <= 60, \"First constraint\"\nprob += 3*x1 + 2*x2 <= 200, \"Second constraint\"\nprob += x1 + 2*x3 <= 70, \"Third constraint\"\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()\n\n# The status of the solution is printed to the screen\nprint(\"Status:\", LpStatus[prob.status])\n\n# The optimal values of the variables are printed to the screen\nfor v in prob.variables():\n    print(v.name, \"=\", v.varValue)\n\n# The optimal total profit is printed to the screen\nprint(\"Total Profit =\", value(prob.objective))\n```\n\nNote: The exact solution depends on the model's specifications and the solver used. The above code will give you an idea of how you can set up and solve this problem using Python and the pulp library.", "code": "from pulp import *\n\n# Create the 'prob' variable to contain the problem data\nprob = LpProblem(\"MFG Corporation Problem\", LpMaximize)\n\n# Create problem variables\nx1 = LpVariable(\"x1\", 0, None, LpInteger)\nx2 = LpVariable(\"x2\", 0, None, LpInteger)\nx3 = LpVariable(\"x3\", 0, None, LpInteger)\n\n# The objective function is added to 'prob' first\nprob += (360*15 + 30*(x1-15))*x1 + (240*20 + 120*20 + 90*(x2-40))*x2 + (450*20 + 300*10 + 180*(x3-30))*x3, \"Total Profit\"\n\n# The constraints are added to 'prob'\nprob += x1 + x2 + x3 <= 60, \"First constraint\"\nprob += 3*x1 + 2*x2 <= 200, \"Second constraint\"\nprob += x1 + 2*x3 <= 70, \"Third constraint\"\n\n# The problem is solved using PuLP's choice of Solver\nprob.solve()\n\n# The status of the solution is printed to the screen\nprint(\"Status:\", LpStatus[prob.status])\n\n# The optimal values of the variables are printed to the screen\nfor v in prob.variables():\n    print(v.name, \"=\", v.varValue)\n\n# The optimal total profit is printed to the screen\nprint(\"Total Profit =\", value(prob.objective))", "solution": "COMPILE_ERROR"}