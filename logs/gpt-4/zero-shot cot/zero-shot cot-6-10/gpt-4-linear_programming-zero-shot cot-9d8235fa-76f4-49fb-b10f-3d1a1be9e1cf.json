{"system_prompt": "You are an operations research expert. Write python code to solve the given problem. Assign the final output to a variable 'solution'. Only assign one number.", "problem_description": "Consider the following problem: The WorldLight Company produces two light fixtures (products 1 and 2) that require both metal frame parts and electrical components. Management wants to determine how many units of each product to produce so as to maximize profit. For each unit of product 1, 1 unit of frame parts and 2 units of electrical components are required. For each unit of product 2, 3 units of frame parts and 2 units of electrical components are required. The company has 200 units of frame parts and 300 units of electrical components. Each unit of product 1 gives a profit of $1, and each unit of product 2, up to 60 units, gives a profit of $2. Any excess over 60 units of product 2 brings no profit, so such an excess has been ruled out. What is the resulting total profit?", "examples": null, "output": "First, we need to understand that this is a linear programming problem, which involves choosing the best (in this case, most profitable) option from a set of alternatives subject to constraints (in this case, the available units of frame parts and electrical components).\n\nThe objective function (the function we want to maximize) is the profit function, which is $1 for each unit of product 1 and $2 for each unit of product 2. The constraints are the available units of frame parts and electrical components.\n\nWe can formulate this as follows:\n\nLet x1 be the number of units of product 1 and x2 be the number of units of product 2.\n\nMaximize: P = x1 + 2*x2\n\nSubject to:\nx1 + 3*x2 <= 200\n2*x1 + 2*x2 <= 300\nx2 <= 60\n\nThe first constraint represents the available units of frame parts, the second constraint represents the available units of electrical components, and the third constraint represents the maximum units of product 2 that can be produced for profit.\n\nNow, we can use a linear programming solver to find the optimal solution. There are several libraries available in Python for this purpose, such as scipy and pulp. I will use pulp in this case.\n\nHere is the Python code:\n```python\nfrom pulp import *\n\n# Create a problem variable\nprob = LpProblem(\"WorldLight\", LpMaximize)\n\n# Create decision variables\nx1 = LpVariable(\"Product 1\", 0, None, LpInteger)\nx2 = LpVariable(\"Product 2\", 0, 60, LpInteger)\n\n# Add the objective function\nprob += x1 + 2*x2, \"Total Profit\"\n\n# Add constraints\nprob += x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\n\n# Solve the problem\nprob.solve()\n\n# Print the result\nsolution = value(prob.objective)\nprint(\"The maximum profit is: $\", solution)\n```\n\nPlease run the above code to find the maximum profit.", "code": "from pulp import *\n\n# Create a problem variable\nprob = LpProblem(\"WorldLight\", LpMaximize)\n\n# Create decision variables\nx1 = LpVariable(\"Product 1\", 0, None, LpInteger)\nx2 = LpVariable(\"Product 2\", 0, 60, LpInteger)\n\n# Add the objective function\nprob += x1 + 2*x2, \"Total Profit\"\n\n# Add constraints\nprob += x1 + 3*x2 <= 200, \"Frame Parts\"\nprob += 2*x1 + 2*x2 <= 300, \"Electrical Components\"\n\n# Solve the problem\nprob.solve()\n\n# Print the result\nsolution = value(prob.objective)\nprint(\"The maximum profit is: $\", solution)", "solution": 175.0}